library(wavethresh)
library(susiF.alpha)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
rsnr <- 0.5 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect
plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")
legend(x=100,
y=3,
lty = rep(1,3),
legend= c("effect 1", "effect 2" ),
col=c("black","blue","yellow"))
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
for ( i in 1:N)
{
f1_obs <- f1
f2_obs <- f2
noise <- rnorm(length(f1), sd= 0.1)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs + beta2*G[i,pos2]*f2_obs + noise
}
noisy.data <- do.call(rbind, noisy.data)
plot( noisy.data[1,], type = "l", col=(G[1, pos1]*3+1),
main="Observed curves \n colored by the causal effect", ylim= c(-40,40), xlab="")
for ( i in 2:N)
{
lines( noisy.data[i,], type = "l", col=(G[i, pos1]*3+1))
}
legend(x=0.3,
y=-10,
lty = rep(1,3),
legend= c("0", "1","2"),
col=c("black","blue","yellow"))
Y <- noisy.data
X <- G
#Running fSuSiE
out <- susiF(Y,X,L=2   )
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot( out$ind_fitted_func, true_sig)
susiF.obj <-out
idx_lead_cov <- list()
for (l in 1:length(susiF.obj$alpha)){
idx_lead_cov[[l]]  <- which.max(susiF.obj$alpha[[l]])
}
tt <-  Reduce("+", lapply(1:length(susiF.obj$alpha), function(l)   matrix( X[,idx_lead_cov[[l]]], ncol=1)%*%  t(susiF.obj$fitted_func[[l]] ) ) )
abline(a=0,b=1)
abline(a=0,b=1)
#susiF.alpha:::update_cal_indf.susiF
rm(list=ls())
library(ashr)
library(wavethresh)
library(susiF.alpha)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
rsnr <- 0.5 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect
plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")
legend(x=100,
y=3,
lty = rep(1,3),
legend= c("effect 1", "effect 2" ),
col=c("black","blue","yellow"))
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
for ( i in 1:N)
{
f1_obs <- f1
f2_obs <- f2
noise <- rnorm(length(f1), sd= 1)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs + beta2*G[i,pos2]*f2_obs + noise
}
noisy.data <- do.call(rbind, noisy.data)
plot( noisy.data[1,], type = "l", col=(G[1, pos1]*3+1),
main="Observed curves \n colored by the causal effect", ylim= c(-40,40), xlab="")
for ( i in 2:N)
{
lines( noisy.data[i,], type = "l", col=(G[i, pos1]*3+1))
}
legend(x=0.3,
y=-10,
lty = rep(1,3),
legend= c("0", "1","2"),
col=c("black","blue","yellow"))
Y <- noisy.data
X <- G
#Running fSuSiE
out <- susiF(Y,X,L=2   )
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot( out$ind_fitted_func, true_sig)
susiF.obj <-out
idx_lead_cov <- list()
for (l in 1:length(susiF.obj$alpha)){
idx_lead_cov[[l]]  <- which.max(susiF.obj$alpha[[l]])
}
tt <-  Reduce("+", lapply(1:length(susiF.obj$alpha), function(l)   matrix( X[,idx_lead_cov[[l]]], ncol=1)%*%  t(susiF.obj$fitted_func[[l]] ) ) )
abline(a=0,b=1)
abline(a=0,b=1)
#susiF.alpha:::update_cal_indf.susiF
rm(list=ls())
library(ashr)
library(wavethresh)
library(susiF.alpha)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
rsnr <- 0.5 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect
plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")
legend(x=100,
y=3,
lty = rep(1,3),
legend= c("effect 1", "effect 2" ),
col=c("black","blue","yellow"))
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
for ( i in 1:N)
{
f1_obs <- f1
f2_obs <- f2
noise <- rnorm(length(f1), sd= 1)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs + beta2*G[i,pos2]*f2_obs + noise
}
noisy.data <- do.call(rbind, noisy.data)
plot( noisy.data[1,], type = "l", col=(G[1, pos1]*3+1),
main="Observed curves \n colored by the causal effect", ylim= c(-40,40), xlab="")
for ( i in 2:N)
{
lines( noisy.data[i,], type = "l", col=(G[i, pos1]*3+1))
}
legend(x=0.3,
y=-10,
lty = rep(1,3),
legend= c("0", "1","2"),
col=c("black","blue","yellow"))
Y <- noisy.data
X <- G
#Running fSuSiE
out <- susiF(Y,X,L=2   )
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot( out$ind_fitted_func, true_sig)
out2 <- susiF(Y,X,L=2   ,TI=FALSE)
points( out2$ind_fitted_func, true_sig,col="green")
rm(list=ls())
library(ashr)
library(wavethresh)
library(susiF.alpha)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
rsnr <- 2 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect
plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")
legend(x=100,
y=3,
lty = rep(1,3),
legend= c("effect 1", "effect 2" ),
col=c("black","blue","yellow"))
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
for ( i in 1:N)
{
f1_obs <- f1
f2_obs <- f2
noise <- rnorm(length(f1), sd= 2)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs + beta2*G[i,pos2]*f2_obs + noise
}
noisy.data <- do.call(rbind, noisy.data)
plot( noisy.data[1,], type = "l", col=(G[1, pos1]*3+1),
main="Observed curves \n colored by the causal effect", ylim= c(-40,40), xlab="")
for ( i in 2:N)
{
lines( noisy.data[i,], type = "l", col=(G[i, pos1]*3+1))
}
legend(x=0.3,
y=-10,
lty = rep(1,3),
legend= c("0", "1","2"),
col=c("black","blue","yellow"))
Y <- noisy.data
X <- G
#Running fSuSiE
out <- susiF(Y,X,L=2   )
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot( out$ind_fitted_func, true_sig)
out2 <- susiF(Y,X,L=2   ,TI=FALSE)
points( out2$ind_fitted_func, true_sig,col="green")
library(susiF.alpha)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 5,
fig.height = 3,
fig.align = "center",
fig.cap = "&nbsp;",
dpi = 120
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(susiF.alpha)
library(susieR)
library(wavethresh)
set.seed(1)
data(N3finemapping)
attach(N3finemapping)
rsnr <- 0.5 #expected root signal noise ratio
pos1 <- 25    #Position of the causal covariate for effect 1
pos2 <- 75    #Position of the causal covariate for effect 2
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect
plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")
legend(x=100,
y=3,
lty = rep(1,3),
legend= c("effect 1", "effect 2" ),
col=c( "blue","green"))
noisy.data  <- list()
X <- N3finemapping$X[,1:100]
for ( i in 1:nrow(X))
{
f1_obs <- f1
f2_obs <- f2
noise <- rnorm(length(f1), sd=  (1/  rsnr ) * var(f1))
noisy.data [[i]] <-  X[i,pos1]*f1_obs +X[i,pos2]*f2_obs + noise
}
noisy.data <- do.call(rbind, noisy.data)
Y <- noisy.data
out <- susiF(Y,X,L=10)
out <- susiF(Y,X,L=10)
out$cs
plot_susiF(out )
par(mfrow=c(1,2))
plot( f1, type="l", main="Estimated effect 1", xlab="")
lines(get_fitted_effect(out,l=2),col='blue' )
abline(a=0,b=0)
legend(x= 35,
y=3,
lty= rep(1,2),
legend = c("effect 1"," fSuSiE est "),
col=c("black","blue" )
)
plot( f2, type="l", main="Estimated effect 2", xlab="")
lines(get_fitted_effect(out,l=1),col='green' )
abline(a=0,b=0)
legend(x= 20,
y=-1.5,
lty= rep(1,2),
legend = c("effect 2"," fSuSiE est "),
col=c("black","green" )
)
par(mfrow=c(1,1))
out$pip[1:10]
plot_susiF(out, pip_only=TRUE)
affected_reg(susiF.obj = out)
out1 <- susiF(Y,X,L=3 , prior = 'mixture_normal_per_scale',verbose=FALSE)
out1$runtime
set.seed(2)
data(N3finemapping)
attach(N3finemapping)
rsnr <- 0.5 #expected root signal noise ratio
pos1 <- 25    #Position of the causal covariate for effect 1
pos2 <- 75    #Position of the causal covariate for effect 2
lev_res <- 9#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func  #first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func  #second effect
## suppose we observe these functions on 200 points
sampling_pos <- sample( 1:length(f1), size=200)
sampling_pos <-sampling_pos  [order(sampling_pos)]
plot(f2, type="l", main="underlying function and the different sampling postion")
points(sampling_pos, f2[sampling_pos], col="red",pch=20)
points(sampling_pos, rep(0, length(sampling_pos)), col="red",pch=3)
abline(0,0)
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot(out$ind_fitted_func,  true_sig)
true_sig  <- matrix( X[ ,pos1], ncol=1)%*%t(f1_obs) +matrix( X[ ,pos2], ncol=1)%*%t(f2_obs)
plot(out$ind_fitted_func,  true_sig)
abline(a=0,b=1)
plot(out$ind_fitted_func,  Y)
abline(a=0,b=1)
library(susiF.alpha)
library(susiF.alpha)
rm(list=ls())
devtools::load_all(".")
library(susiF.alpha)
library(ashr)
library(wavethresh)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
sd_noise <- 1 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <-7#length of the molecular phenotype (2^lev_res)
f1 <-  rep(0, 2^lev_res)
f1[ 20:25] <-2
f1[ 50:55] <-1
f1[ 20:25] <-2
f1 <-  simu_IBSS_per_level(lev_res )$sim_func
f1[60:length(f1)] <-0
f1[ 70:85] <- -1
#first effect)
f2 <-  0.1*DJ.EX(128)$blocks
plot( f1, type ="l", ylab="effect", col="blue")
lines(f2, col="red")
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
#f2 <-f1
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
X <-G
for ( i in 1:N)
{
noise <- rnorm(length(f1), sd=  sd_noise)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1 + beta1*G[i,pos2]*f2  + noise
}
noisy.data <- do.call(rbind, noisy.data)
Y <- noisy.data
out <- susiF(Y,X,L=2 , prior = 'mixture_normal_per_scale', filter.number =8  )
out2 <- susiF(Y,X,L=2 , prior = 'mixture_normal_per_scale', TI=FALSE,filter.number =8  )
X <- colScale(X)
# centering input
Y <- colScale(Y, scale=FALSE)
susiF.obj <- out
L_points=20
idx <- do.call( c, lapply( 1:length(susiF.obj$cs),
function(l){
tp_id <-  which.max( susiF.obj$pip[susiF.obj$cs[[l]]])
susiF.obj$cs[[l]][tp_id]
}
)
)
temp_Y <- Y
res <- cal_Bhat_Shat(temp_Y,X )
source("D:/Document/Serieux/Travail/Package/susiF.alpha/inst/code/fit_hmm.R" )
temp_Y <- Y
fitted_trend <- list()
for ( k in 1:10){
for (j in 1:length(idx)){
res <- cal_Bhat_Shat(temp_Y,X )
#plot(res$Bhat[idx[j],])
s =fit_hmm(x=res$Bhat[idx[j],],sd=res$Shat[idx[j],],halfK=50 )
#plot(predict(s))
fitted_trend[[j]] <- s$x_post
if( j ==length(idx)){
idx_var <- (1:length(idx)) [- (1)]
}else{
idx_var <- (1:length(idx))[- (j+1)]
}
temp_Y <- Y - Reduce("+", lapply( idx_var, function( j){
X[,idx[j] ]%*%t(fitted_trend[[j]])
}
)
)
}
}
fitted_trend <- lapply(1:length(idx), function(l)
fitted_trend[[l]]/susiF.obj$csd_X[idx[l]]
)
plot( f1, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( out$fitted_func[[1]] ,col='blue',lwd=1.5   )
fitted_trend
plot( 21, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
plot( f2, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( out$fitted_func[[2]] ,col='blue',lwd=1.5   )
plot( f1, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( fitted_trend[[1]] ,col='blue',lwd=1.5   )
plot( f2, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( fitted_trend[[2]] ,col='blue',lwd=1.5   )
source("D:/Document/Serieux/Travail/Package/susiF.alpha/inst/code/fit_hmm.R", echo=TRUE)
rm(list=ls())
devtools::load_all(".")
library(susiF.alpha)
library(ashr)
library(wavethresh)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
sd_noise <- 1 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates/SNP
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 2
lev_res <-7#length of the molecular phenotype (2^lev_res)
f1 <-  rep(0, 2^lev_res)
f1[ 20:25] <-2
f1[ 50:55] <-1
f1[ 20:25] <-2
f1 <-  simu_IBSS_per_level(lev_res )$sim_func
f1[60:length(f1)] <-0
f1[ 70:85] <- -1
#first effect)
f2 <-  0.1*DJ.EX(128)$blocks
plot( f1, type ="l", ylab="effect", col="blue")
lines(f2, col="red")
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()
#f2 <-f1
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
X <-G
for ( i in 1:N)
{
noise <- rnorm(length(f1), sd=  sd_noise)
noisy.data [[i]] <-   beta1*G[i,pos1]*f1 + beta1*G[i,pos2]*f2  + noise
}
noisy.data <- do.call(rbind, noisy.data)
Y <- noisy.data
out <- susiF(Y,X,L=2 , prior = 'mixture_normal_per_scale', filter.number =8  )
out2 <- susiF(Y,X,L=2 , prior = 'mixture_normal_per_scale', TI=FALSE,filter.number =8  )
X <- colScale(X)
# centering input
Y <- colScale(Y, scale=FALSE)
susiF.obj <- out
L_points=20
idx <- do.call( c, lapply( 1:length(susiF.obj$cs),
function(l){
tp_id <-  which.max( susiF.obj$pip[susiF.obj$cs[[l]]])
susiF.obj$cs[[l]][tp_id]
}
)
)
temp_Y <- Y
res <- cal_Bhat_Shat(temp_Y,X )
source("D:/Document/Serieux/Travail/Package/susiF.alpha/inst/code/fit_hmm.R" )
temp_Y <- Y
fitted_trend <- list()
for ( k in 1:10){
for (j in 1:length(idx)){
res <- cal_Bhat_Shat(temp_Y,X )
s =fit_hmm(x=res$Bhat[idx[j],],sd=res$Shat[idx[j],],halfK=100 )
fitted_trend[[j]] <- s$x_post
if( j ==length(idx)){
idx_var <- (1:length(idx)) [- (1)]
}else{
idx_var <- (1:length(idx))[- (j+1)]
}
temp_Y <- Y - Reduce("+", lapply( idx_var, function( j){
X[,idx[j] ]%*%t(fitted_trend[[j]])
}
)
)
}
}
temp_Y <- Y
res <- cal_Bhat_Shat(temp_Y,X )
fitted_trend <- lapply(1:length(idx), function(l)
fitted_trend[[l]]/susiF.obj$csd_X[idx[l]]
)
plot( f1, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( fitted_trend[[1]] ,col='blue',lwd=1.5   )
plot( f2, type="l", main="Estimated effect 1, sd=1",
xlab="" ,lwd=2   )
lines( fitted_trend[[2]] ,col='blue',lwd=1.5   )
s$$prob[,-1]
s$prob[,-1]
plot(1- s$prob[,1])
lines(apply(s$prob[,-1],1, sum))
