library(susiF.alpha)
library(sim1000G)
#set.seed(1)
examples_dir = system.file("examples", package = "sim1000G")
vcf_file = file.path(examples_dir, "region.vcf.gz")

vcf = readVCF( vcf_file , maxNumberOfVariants = 200000 , min_maf = 0.02 , max_maf = NA )

# downloadGeneticMap( 4 )
readGeneticMap( chromosome = 4)

startSimulation( vcf )



'%!in%' <- function(x,y)!('%in%'(x,y))
id = c()
for(i in 1:100) id[i] = SIM$addUnrelatedIndividual()

# Show haplotype 1  of first 5 individuals
#print(SIM$gt1[1:5,1:6])

# Show haplotype 2
#print(SIM$gt1[1:5,1:6])



genotypes = SIM$gt1[1:100,] + SIM$gt2[1:100,]


caca <- genotypes
print(dim(genotypes))

str(genotypes)
 
  L <- sample(3:5, size=1)#actual number of effect
  print(L)
  lf <-  list()
  for(l in 1:L){
    lf[[l]] <- simu_IBSS_per_level(lev_res=5)$sim_func #functional effect for effect l
  }
  
  
  tt <- sample(0:4,1)
  G <- genotypes[ ,(1+tt*100):(1+(tt+1)*100)]
  
  if( length(which(apply(G,2,var)==0))>0){
    G <- G[,-which(apply(G,2,var)==0)]
  }
  # G <- matrix( rnorm(100*300), nrow = 100)
  true_pos <- sample( 1:ncol(G), L)
  
  Y <- matrix(rnorm((2^5)*100 ,sd=1), nrow = 100)
  for ( i in 1:100){
    for ( l in 1:L){
      Y[i,] <- Y[i,]+ lf[[l]]*G[i,true_pos[[l]]]
    }
  }
  
  m1 <- susiF(Y=Y , X=G ,L=7 ,L_start=7,
              verbose=TRUE ,nullweight=10, 
              prior="mixture_normal_per_scale",
              cal_obj =TRUE,  maxit=10,
              gridmult=3)
  m1$ELBO
  diff(m1$ELBO)
  plot(m1$ELBO[-1])
  m1$cs
  m1 <-susiF(Y=Y[1:30,], X=G[1:30,],L=7 ,L_start=7,
              verbose=TRUE ,nullweight=20, 
              cal_obj =TRUE, prior="mixture_normal",
                maxit=20,
              gridmult=4)
  m1$cs
  m1$ELBO
  diff(m1$ELBO)
  plot(m1$ELBO[-1])
 
  m1$est_pi
  true_pos[order(true_pos)]
  m2 <- susiF(Y=Y, X=G,L=10,L_start=11 ,nullweight=10 , maxit=10)
  m2$cs
  
  cal_purity <- function(l_cs,X){
    tt <- c()
    for (k in 1:length(l_cs)){
      if(length(l_cs[[k]])==1 ){
        tt <- c( tt,1)
      }else{
        
        upper_diag <- X[,l_cs[[k]]][row(X[,l_cs[[k]]]) == (col(X[,l_cs[[k]]]) + 1)]# upper diga
        tt <- c( tt, mean(upper_diag))
      }
      
    }
    return(mean(tt))
  }
  
  out <- c( length(m1$cs), #number of CS
            length(which(true_pos%in% do.call(c, m1$cs))), #number of effect found
            Reduce("+",sapply(1:length(m1$cs), function(k)
              ifelse( length(which(true_pos%in%m1$cs[[k]] ))==0, 1,0)
            )
            ),#number of CS without any effect
            cal_purity(m1$cs, X=as.matrix(G)),#mean purity
            mean(sapply( m1$cs, length)), #CS size
            length(m2$cs),
            length(which(true_pos%in% do.call(c, m2$cs))),
            Reduce("+",sapply(1:length(m2$cs), function(k)
              ifelse( length(which(true_pos%in%m2$cs[[k]] ))==0, 1,0)
            )
            ),#number of CS without any effect
            cal_purity(m2$cs, X=as.matrix(G)),#mean purity
            mean(sapply( m2$cs, length)), #CS size
            L,tt)