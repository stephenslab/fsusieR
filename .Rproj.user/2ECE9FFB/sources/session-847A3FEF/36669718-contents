





#' @title Compute KL divergence effect l
#'
#' @param susiF.obj a susisF object defined by \code{\link{init_susiF_obj}} function
#'
#' @param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'
#' @param Y wavelet transformed phenotype
#'
#' @param X matrix of covariate
#'
#' @param D matrix of wavelet D coefficients from the original input data (Y)
#'
#' @param C vector of wavelet scaling coefficient from the original input data (Y)
#'
#' @param indx_lst list generated by gen_wavelet_indx for the given level of resolution
#'
#' @return The KL divergence for effect l
#' @export
cal_KL_l <- function(susiF.obj, l, Y, X, D,C , indx_lst, ...)
  UseMethod("cal_KL_l")




#' @rdname cal_KL_l
#'
#' @method cal_KL_l susiF
#'
#' @export cal_KL_l.susiF
#'
#' @export
#'

cal_KL_l.susiF <- function(susiF.obj, l, X, D, C , indx_lst, ...)
{
  EF_l <- get_post_F(susiF.obj,l)
  R_l <- cal_partial_resid(
                           susiF.obj = susiF.obj,
                           l         =  l,
                           X         =  X,
                           D         =  D,
                           C         =  C,
                           indx_lst  = indx_lst
                          )



  out <-  - loglik_SFR(susiF.obj, l,Y,X)+ loglik_SFR_post(susiF.obj, l,R_l,X)
  return(out)
}




#' @rdname cal_KL_l
#'
#' @method cal_KL_l susiF_ss
#'
#' @export cal_KL_l.susiF_ss
#'
#' @export
#'

cal_KL_l.susiF_ss <- function(susiF_ss.obj, l, data , ...)
{
  lBF           <- get_lBF(susiF_ss.obj,l)
  prior_weights <- rep(1/nrow(data$Bhat),nrow(data$Bhat))
  maxlBF        <- max(lBF)

  w = exp( lBF- maxlBF)
  w_weighted = w * prior_weights
  weighted_sum_w = sum(w_weighted)
  lBF_model = maxlBF + log(weighted_sum_w)
  data_partial_residual  <- update_expected_residual(
                                                     susiF_ss.obj = susiF_ss.obj,
                                                     data         = data,
                                                     l            = l
                                                     )


  out <-  -lBF_model + loglik_SFR_post(susiF_ss.obj, l,data = data_partial_residual )
  return(out)
}

#' @title Compute log likelihood of single function regression of effect l
#'
#' @param susiF.obj a susiF object defined by \code{\link{init_susiF_obj}} function
#'
#' @param l effect to update
#'
#' @param Y wavelet transformed phenotype
#'
#' @param X Matrix of covariates
#'
#' @return The log-likelihood, \eqn{\log p(Y | X, V)}, where V is the prior parameters
#' @export
loglik_SFR <- function    (susiF.obj, l,  ...)
  UseMethod("loglik_SFR")




#' @rdname loglik_SFR
#'
#' @method loglik_SFR susiF
#'
#' @export loglik_SFR.susiF
#'
#' @export
#'

loglik_SFR.susiF <- function(susiF.obj, l,Y ,X )
{
  lBF <- get_lBF(susiF.obj,l)
  prior_weights <- rep(1/ncol(X),ncol(X))
  maxlBF <- max(lBF)
  w = exp( lBF- maxlBF)
  w_weighted = w * prior_weights
  weighted_sum_w = sum(w_weighted)

  lBF_model = maxlBF + log(weighted_sum_w)
  loglik <- lBF_model + sum(dnorm(Y,0,sqrt(susiF.obj$sigma2),log = TRUE))

  return(loglik)
}
#https://github.com/stephenslab/mvsusieR/blob/master/R/single_effect_model.R



#' @title Compute posterior expected loglikelihood for  single function regression of effect l
#'
#' @param susiF.obj a susiF object defined by \code{\link{init_susiF_obj}} function
#'
#' @param l effect to update
#'
#' @param Y wavelet transformed phenotype
#'
#' @param X Matrix of covariates
#'
#' @return posterior expected loglikelihood for  single function regression of effect l
#' @export
loglik_SFR_post <- function    (susiF.obj, l,  ...)
  UseMethod("loglik_SFR_post")


#' @rdname loglik_SFR_post
#'
#' @method loglik_SFR_post susiF
#'
#' @export loglik_SFR_post.susiF
#'
#' @export
#'

loglik_SFR_post.susiF <- function(susiF.obj, l,Y,X)
{
  n <- nrow(Y)
  t <- ncol(Y)
  EF  <- get_post_F(susiF.obj,l)
  EF2 <- get_post_F2(susiF.obj,l)
  s2  <- susiF.obj$sigma2
  return(-0.5*n*t*log(2*pi*s2) - 0.5/s2*(sum(Y*Y)- 2*sum(Y*X%*%EF)+ sum(attr(X,"d") * EF2)))
}


#' @rdname loglik_SFR_post
#'
#' @method loglik_SFR_post susiF_ss
#'
#' @export loglik_SFR_post.susiF_ss
#'
#' @export
#'

loglik_SFR_post.susiF_ss <- function(susiF_ss.obj,l, data)
{
  n <- data$N
  t <- ncol(data$Bhat)
  EF  <- get_post_F(susiF_ss.obj,l)
  EF2 <- get_post_F2(susiF_ss.obj,l)
  s2  <- susiF_ss.obj$sigma2
  return(-0.5*n*t*log(2*pi*s2) - 0.5/s2*(sum(data$yty)- 2*sum(t(data$Xty)%*%EF)+ sum(c(nrow(data$Bhat),data$N) * EF2)))
}




#' @title Expected log likelihood for a   susiF   object
#'
#' @param susiF.obj a susiF object defined by \code{\link{init_susiF_obj}} function
#'
#' @param Y Matrix of outcomes
#'
#' @param X Matrix of covariates
#'
#' @return Expected log likelihood
#' @export
Eloglik <- function    (susiF.obj, Y, X,  ...)
  UseMethod("Eloglik")


#' @rdname Eloglik
#'
#' @method Eloglik susiF
#'
#' @export Eloglik.susiF
#' @export
Eloglik.susiF = function (susiF.obj,Y ,X) {
  n = nrow(Y)
  t = ncol(Y)

  return(-(n*t/2) * log(2*pi*susiF.obj$sigma2) - (1/(2*susiF.obj$sigma2)) * get_ER2( susiF.obj, Y, X))
}

Eloglik.susiF_ss = function (susiF_ss.obj,data) {
  n <- data$N
  t <- ncol(data$Bhat)

  return(-(n*t/2) * log(2*pi*susiF_ss.obj$sigma2) - (1/(2*susiF_ss.obj$sigma2)) * get_ER2( susiF_ss.obj,data))
}

#' @title Get objective function from data and susiF object
#'
#' @param susiF.obj a susiF object defined by \code{\link{init_susiF_obj}} function
#'
#' @param Y Matrix of outcomes
#'
#' @param X matrix of covariate
#'
#' @param D matrix of wavelet D coefficients from the original input data (Y)
#'
#' @param C vector of wavelet scaling coefficient from the original input data (Y)
#'
#' @param indx_lst list generated by gen_wavelet_indx for the given level of resolution
#'
#' @return objective function value
#'
#' @export
get_objective <- function    (susiF.obj,  Y, X, D, C , indx_lst,  ...)
  UseMethod("get_objective")


#' @rdname get_objective
#'
#' @method get_objective susiF
#'
#' @export get_objective.susiF
#' @export
get_objective.susiF <- function    (susiF.obj, Y, X, D, C , indx_lst,  ...)
{

  out <- Eloglik(susiF.obj, Y, X) - sum(susiF.obj$KL)
  return(out)

}

#' @rdname get_objective
#'
#' @method get_objective susiF_ss
#'
#' @export get_objective.susiF_ss
#' @export
get_objective.susiF_ss <- function    (susiF_ss.obj,data,  ...)
{
  susiF_ss.obj <- update_KL(susiF_ss.obj, data)
  out <- Eloglik(susiF_ss.obj,data) - sum(susiF_ss.obj$KL)
  return(out)

}
