 rm(list=ls())
N=500
P=10
set.seed(23)
G = matrix(sample(c(0, 1,2), size=N*P, replace=T), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
pos1 <- 5
noisy.data  <- list()
rsnr=0.25
for ( i in 1:N)
{
  f1_obs <- wavethresh::DJ.EX(n=128, noisy=FALSE)[[1]]
  noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs +  rnorm(length(f1_obs), sd=  (1/  rsnr ) *sd(f1_obs))
  
}
noisy.data <- do.call(rbind, noisy.data)


#Generating individual curve sample with noise, parameter rsnr in the loop below



Y <- noisy.data
X <- G
v1 <- rep(1, dim(X)[1])

get_Bhat_Shat <- function(Y,X,v1 )
{
  Bhat  <- list()
  Shat  <- list()
  
  for ( l in 1:dim(Y)[2])
  {
    out <- do.call( cbind,lapply( 1:dim(X)[2], function(j)fit_lm(l= l,j=j, Y=Y,X=X, v1=v1  ) ) )    #mapply(fit_lm, l=l,j= 1 ,Y=Y,X=X,v1=v1 )
    Bhat[[l]]  <- out[1,]
    Shat[[l]] <- out[2,]
  }
  
  Bhat <- (do.call(cbind, Bhat))
  Shat <- (do.call(cbind, Shat))
  out  <- list( Bhat = Bhat,
                Shat = Shat)
  return(out)
}


fit_lm <- function( l,j,Y,X,v1)  ## Speed Gain
{
  Xtemp <- cbind(v1,get_column(j,X))
  out <- lmfit(Xtemp,get_column(l,Y))
  return(c(out$be[2,1],
           sqrt(
             var(out$residuals)/sum(
               (get_column(j,X)-mean(get_column(j,X)))^2)
           )
  )
  )
  
}
library(Rfast)
fit_lm <- function( l,j=1,Y,X,v1)  ## Speed Gain
{
   out <-   matrix(Y[,j])
  return(out)
}

fit_lm(l= 1,j=1, Y=Y,X=X, v1=v1  )
fit_lm(l= 2,j=2, Y=Y,X=X, v1=v1  )
get_Bhat_Shat(Y,X,v1)

?mapply 
sapply(l=1, fit_lm, j=1 ,Y=Y,X=X,v1=v1 )
mapply(rep,x= 1:4, times= 4:1)

get_column <- function(j,X){
  out <- X[,j]
  return(out)
}
get_colum(1,Y)
sapply(1:10, get_colum,X)
