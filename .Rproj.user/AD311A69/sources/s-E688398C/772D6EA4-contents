################################## Operations on susif object ############################
#'
#'@title Initialize a susiF object using regression coefficients
#'
#'
#'@param L number of non zero coefficients An L-vector containing the the indices of the
#'   nonzero coefficients.
#'
#' @param G_prior prior object defined by init_prior function
#' @param Y Matrix of outcomes
#' @param X Matrix of covariate
#' @return A list with elements
#' @item fitted_wc2
#' @item fitted_wc2
#' @item alpha_hist
#' @item  ind_fitted_func
#' @item cs (credible set)
#' @item pip Posterior inclusion probabilites
#' @item G_prior a G_prior of the same class as the input G_prior, used for internal calculation
#'


init_susiF_obj <- function(L, G_prior, Y,X ){

  obj <-list()
  fitted_wc       <-  list()
  fitted_wc2      <-  list()
  alpha           <-  list()
  alpha_hist      <-  list()
  ind_fitted_func <-  list()
  cs              <-  list()
  pip             <-  rep(NA, dim(X)[2])
  est_pi          <-  list()
  est_sd          <-  list()
  G_prior         <-  G_prior
  for ( l in L )
    {
     fitted_wc[[l]]        <-  matrix(NA, nrow = dim(X)[2], ncol=dim(Y)[2]  )
     fitted_wc2[[l]]       <-  matrix(NA, nrow = dim(X)[2], ncol=dim(Y)[2]  )
     alpha [[l]]           <-  rep(NA, dim(X)[2])
     ind_fitted_func[[l]]  <-  matrix(NA, nrow = dim(Y)[1], ncol=dim(Y)[2]  )
     cs[[l]]               <-  list()
     est_pi [[l]]          <-  get_pi_G_prior(G_prior)
     est_sd [[l]]          <-  get_sd_G_prior(G_prior)
    }
 obj <- list( fitted_wc       = fitted_wc,
              fitted_wc2      = fitted_wc2,
              ind_fitted_func = ind_fitted_func,
              alpha_hist      = alpha_hist,
              alpha           = alpha,
              cs              = cs,
              pip             = pip,
              est_pi          = est_pi,
              est_sd          = est_sd,
              G_prior         = G_prior)

 class(obj) <- "susiF"
 return(obj)
}

#'
#'@title Access susif mixture proprotion of effect l
#'
#'@param susiF.obj a susisf object defined by init_susiF_obj function
#'@param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'@return susiF object
#'@export
get_pi.susiF <- function(susiF.obj, l)
{

  if( l > length(susiF.obj$est_pi))
  {
    stop("Error trying to acces mixture proportion")
  }
  if( l < 1)
  {
    stop("Error l should be larger ")
  }
  out <- susiF.obj$est_pi[[l]]
  return(out)
}


#'
#'@title Access susif internal prior
#'
#'@param susiF.obj a susisf object defined by init_susiF_bj function
#'@return G_prior object
#'@export
get_G_prior.susiF <- function(susiF.obj)
{
  out <- susiF.obj$G_prior
  return(out)
}

#'@title Update mixture proportion of susif mixture proprotion of effect l
#'
#'@param susiF.obj a susisf object defined by init_susiF_obj function
#'@param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'@param tpi an object of the class "pi_mixture_normal" or "pi_mixture_normal_per_scale"
#'@return susiF object
#'@export
update_pi_susiF <- function( susiF.obj, l, tpi)
{

  if( l > length(susiF.obj$est_pi))
  {
    stop("Error trying to acces mixture proportion")
  }
  if( l < 1)
  {
    stop("Error l should be larger ")
  }
  if( class(tpi)%!in% c("pi_mixture_normal" , "pi_mixture_normal_per_scale"))
  {
    stop("Error tpi should be of one of the follwoing class:\n
          pi_mixture_normal \n pi_mixture_normal_per_scale")
  }
  susiF.obj$est_pi[[l]] <- tpi
  out <- susiF.obj
  class(out) <- "susiF"
  return(out)
}

#'@title Update alpha   susif mixture proportion of effect l
#'
#'@param susiF.obj a susisf object defined by init_susiF_obj function
#'@param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'@param alpha  vector of p alpha values summing up to one
#'@return susiF object
#'@export
update_alpha.susiF <-  function(susiF.obj, l, alpha )
{
  susiF.obj$alpha[[l]] <- alpha
  susiF.obj$alpha_hist[[ (length(susiF.obj$alpha_hist)+1)  ]] <- alpha
  return( susiF.obj)
}

#'@title Update alpha   susif mixture proportion of effect l
#'
#'@param susiF.obj a susisf object defined by init_susiF_obj function
#'@param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'@param alpha  vector of p alpha values summing up to one
#'@return susiF object
#'@export
get_alpha.susiF <-  function(susiF.obj, l  )
{
  out <- susiF.obj$alpha[[l]]
  return( out)
}
#'@title Update  susif object using output of EM
#'
#'@param susiF.obj a susisf object defined by init_susiF_bj function
#'@param l integer larger or equal to 1. Corresponds to the effect to be accessed
#'@param EM_pi an object of the class "EM_pi" generated by the function EM_pi
#'@return susiF object
#'@export
update_susiF_obj <- function (susiF.obj  , l, EM_pi)
{

  if( l > length(susiF.obj$est_pi))
  {
    stop("Error trying to acces mixture proportion")
  }
  if( l < 1)
  {
    stop("Error l should be larger ")
  }
  if( class(EM_pi)%!in% c("EM_pi"))
  {
    stop("Error EM_pi should be of the class EM_pi")
  }
  susiF.obj         <-   update_pi_susiF(susiF.obj = susiF.obj ,
                                  l = l ,
                                  tpi =  EM_out$tpi_k)
  susiF.obj$G_prior <- update_prior(get_G_prior(susiF) , tpi  )

  susiF.obj$fitted_wc_col[[l]]   <- post_mat_mean( get_G_prior(susiF) , Bhat, Shat )
  susiF.obj$fitted_wc_col2[[l]]  <- post_mat_sd  (get_G_prior(susiF) , Bhat, Shat )


  new_alpha <- cal_zeta(  EM_out$lBF)
  susiF.obj <- update_alpha.susiF(susiF.obj, l, new_alpha)
}

