% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/susiF.R
\name{susiF}
\alias{susiF}
\title{Sum of Single Functions}
\usage{
susiF(
  Y,
  X,
  L = 2,
  pos = NULL,
  prior = "mixture_normal_per_scale",
  verbose = TRUE,
  maxit = 100,
  tol = 1,
  cov_lev = 0.95,
  min.purity = 0.5,
  filter.cs = TRUE,
  init_pi0_w = 1,
  nullweight,
  control_mixsqp = list(verbose = FALSE, eps = 1e-06, numiter.em = 4),
  thresh_lowcount = 0,
  cal_obj = FALSE,
  L_start = 3,
  quantile_trans = FALSE,
  greedy = TRUE,
  backfit = TRUE,
  gridmult = sqrt(2)
)
}
\arguments{
\item{Y}{functional phenotype, matrix of size N by size J. The
underlying algorithm uses wavelet which assume that J is of the
form J^2. If J not a power of 2, susif internally remaps the data
into grid of length 2^J}

\item{X}{matrix of size n by p contains the covariates}

\item{L}{upper bound on the number of effect to fit (if not specified set to =2)}

\item{pos}{vector of length J, corresponding to position/time pf
the observed column in Y, if missing suppose that the observation
are evenly spaced}

\item{prior}{specify the prior used in susif. Three choice are
available "mixture_normal_per_scale", "mixture_normal". Default "mixture_normal_per_scale",
if this susiF is too slow consider using  "mixture_normal" (up to 40% faster), but this may results in
oversmoothing the estimated curves}

\item{verbose}{If \code{verbose = TRUE}, the algorithm's progress,
and a summary of the optimization settings, are printed to the
console.}

\item{maxit}{Maximum number of IBSS iterations to perform.}

\item{tol}{A small, non-negative number specifying the convergence
tolerance for the IBSS fitting procedure. The fitting procedure
will halt when the difference in the variational lower bound, or
\dQuote{ELBO} (the objective function to be maximized), is less
than \code{tol}.}

\item{cov_lev}{numeric between 0 and 1, corresponding to the
expected level of coverage of the cs if not specified set to 0.95}

\item{min.purity}{minimum purity for estimated credible sets}

\item{filter.cs}{logical, if TRUE filter the credible set (removing low purity
cs and cs with estimated prior equal to 0)}

\item{init_pi0_w}{starting value of weight on null compoenent in mixsqp
(between 0 and 1)}

\item{nullweight}{numeric value for penalizing likelihood at point mass 0 (should be between 0 and 1)
(usefull in small sample size)}

\item{control_mixsqp}{list of parameter for mixsqp function see  mixsqp package}

\item{thresh_lowcount}{numeric, use to check the wavelet coefficients have
problematic distribution (very low dispersion even after standardization).
Basically check if the median of the absolute value of the distribution of
 a wavelet coefficient is below this threshold, if yes the algorithm discard
 this wavelet coefficient (setting its estimate effect to 0 and estimate sd to 1).
 Set to 0 by default. Can be useful when analyzing sparse data from sequence
  based assay or small samples.}

\item{cal_obj}{logical if set as true compute ELBO for convergence monitoring}

\item{L_start}{number of effect initialized at the start of the algorithm}

\item{quantile_trans}{logical if set as true perform normal quantile transform
on wavelet coefficients}

\item{greedy}{logical, if true allow greedy search for extra effect
(up to L specify by the user). Set as TRUE by default}

\item{backfit}{logical, if true allow discarding effect via backfitting.
Set as true by default as TRUE. We advise to keep it as TRUE
@param gridmult numeric used to control the number of component used in the mixture prior (see ashr package
for more details). From the ash function:  multiplier by which the default grid values for mixsd differ by one another.
 (Smaller values produce finer grids.). Increasing this value may reduce computational time}
}
\description{
Implementation of the SuSiF method
}
\details{
Implementation of the SuSiF method
}
\examples{

library(susiF.alpha)
library(ashr)
set.seed(1)
#Example using curves simulated under the Mixture normal per scale prior
rsnr <- 0.2 #expected root signal noise ratio
N <- 100    #Number of individuals
P <- 10     #Number of covariates
pos1 <- 1   #Position of the causal covariate for effect 1
pos2 <- 5   #Position of the causal covariate for effect 1
lev_res <- 7#length of the molecular phenotype (2^lev_res)
f1 <-  simu_IBSS_per_level(lev_res )$sim_func#first effect
f2 <- simu_IBSS_per_level(lev_res )$sim_func #second effect

plot( f1, type ="l", ylab="effect", col="blue")
abline(a=0,b=0)
lines(f2, type="l", col="green")

legend(x=100,
      y=3,
      lty = rep(1,3),
      legend= c("effect 1", "effect 2" ),
      col=c("black","blue","yellow"))
G = matrix(sample(c(0, 1,2), size=N*P, replace=TRUE), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
beta2       <- 1
noisy.data  <- list()

for ( i in 1:N)
{
 f1_obs <- f1
 f2_obs <- f2
 noise <- rnorm(length(f1), sd=  (1/  rsnr ) * var(f1))
 noisy.data [[i]] <-   beta1*G[i,pos1]*f1_obs + beta2*G[i,pos2]*f2_obs + noise

}
noisy.data <- do.call(rbind, noisy.data)




plot( noisy.data[1,], type = "l", col=(G[1, pos1]*3+1),
     main="Observed curves \n colored by the causal effect", ylim= c(-40,40), xlab="")
for ( i in 2:N)
{
 lines( noisy.data[i,], type = "l", col=(G[i, pos1]*3+1))

}
legend(x=0.3,
      y=-10,
      lty = rep(1,3),
      legend= c("0", "1","2"),
      col=c("black","blue","yellow"))



Y <- noisy.data
X <- G
#Running fSuSiE

out <- susiF(Y,X,L=2 , prior = 'mixture_normal_per_scale')
#the easiest way to vizualize the result is to use the plot_susiF function

plot_susiF(out)

#You can also acces the information directly in the output of susiF  as follow
par(mfrow=c(1,2))

plot( f1, type="l", main="Estimated effect 1", xlab="")
lines(unlist(out$fitted_func[[1]]),col='blue' )
abline(a=0,b=0)
legend(x= 35,
      y=3,
      lty= rep(1,2),
      legend = c("effect 1"," fSuSiE est "),
      col=c("black","blue" )
)
plot( f2, type="l", main="Estimated effect 2", xlab="")
lines(unlist(out$fitted_func[[2]]),col='green' )
abline(a=0,b=0)
legend(x= 20,
      y=-1.5,
      lty= rep(1,2),
      legend = c("effect 2"," fSuSiE est "),
      col=c("black","green" )
)

par(mfrow=c(1,1))
plot_susiF(out)

}
